[
  {
    "question": "Яка різниця між INNER JOIN та LEFT JOIN?",
    "answers": [
      "Немає різниці, це синоніми",
      "INNER JOIN повертає рядки, де є збіги в обох таблицях, LEFT JOIN повертає всі рядки з лівої таблиці та збіги з правої",
      "INNER JOIN з'єднує таблиці по первинному ключу, LEFT JOIN - по будь-якому полю",
      "INNER JOIN швидший, LEFT JOIN - точніший"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке індекси в SQL і навіщо вони потрібні?",
    "answers": [
      "Індекси - це примітки в коді SQL для документації",
      "Індекси - це спеціальні таблиці, які прискорюють операції пошуку, сортування та з'єднання таблиць за рахунок додаткової пам'яті",
      "Індекси - це автоматично створювані первинні ключі",
      "Індекси - це обмеження для запобігання дублювання записів"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке нормалізація бази даних?",
    "answers": [
      "Процес оптимізації запитів для пришвидшення роботи бази даних",
      "Процес проектування структури БД для мінімізації дублювання даних і залежностей через поділ на нормальні форми",
      "Процес видалення неіснуючих записів з таблиць",
      "Процес тестування бази даних на навантаження"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Яка різниця між DELETE, TRUNCATE і DROP в SQL?",
    "answers": [
      "DELETE видаляє записи і може використовувати WHERE, TRUNCATE швидше видаляє всі записи без WHERE, DROP видаляє всю таблицю з структурою",
      "Це синоніми, використовуються в різних діалектах SQL",
      "DELETE видаляє таблицю, TRUNCATE видаляє базу даних, DROP видаляє записи",
      "DELETE для таблиць, TRUNCATE для індексів, DROP для баз даних"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Що таке SQL-ін'єкція і як від неї захиститися?",
    "answers": [
      "Це метод оптимізації запитів; захист не потрібен",
      "Це атака шляхом вставки шкідливого SQL-коду через вхідні дані; захист через параметризовані запити, підготовлені оператори і екранування вхідних даних",
      "Це метод додавання сторонніх бібліотек SQL; захист через брандмауер",
      "Це метод передачі даних між таблицями; захист через шифрування"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Яка різниця між первинним ключем і унікальним індексом?",
    "answers": [
      "Первинний ключ не може містити NULL, може бути тільки один на таблицю, автоматично створює індекс; унікальний індекс дозволяє NULL і може бути декілька на таблицю",
      "Немає різниці, це синоніми",
      "Первинний ключ для зв'язування таблиць, унікальний індекс для пошуку",
      "Первинний ключ для числових полів, унікальний індекс для текстових"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Які типи JOIN існують в SQL?",
    "answers": [
      "Тільки INNER JOIN і OUTER JOIN",
      "INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL JOIN, CROSS JOIN, SELF JOIN",
      "PRIMARY JOIN, SECONDARY JOIN, TERTIARY JOIN",
      "HORIZONTAL JOIN і VERTICAL JOIN"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Який результат запиту?\n```sql\nSELECT COUNT(*) FROM table WHERE column IS NULL;\n```",
    "answers": [
      "Кількість рядків з NULL у вказаному стовпці",
      "Кількість рядків без NULL у вказаному стовпці",
      "Нуль, оскільки NULL не можна порівнювати",
      "Кількість всіх рядків у таблиці"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Що таке підзапити (subqueries) в SQL?",
    "answers": [
      "Це запити, які використовуються тільки для створення тимчасових таблиць",
      "Це запити всередині інших запитів, які можуть повертати одне значення, список або таблицю",
      "Це запити для підключення до зовнішніх баз даних",
      "Це альтернативний синтаксис для JOIN"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Яка різниця між HAVING і WHERE в SQL?",
    "answers": [
      "HAVING фільтрує групи після GROUP BY, WHERE фільтрує рядки до GROUP BY",
      "Немає різниці, це синоніми",
      "WHERE для числових полів, HAVING для текстових",
      "WHERE для простих умов, HAVING для складних"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Що таке агрегатні функції в SQL і які з них найбільш поширені?",
    "answers": [
      "Функції для роботи з датами: DATE(), TIME(), NOW()",
      "Функції для обчислень над групами значень: COUNT(), SUM(), AVG(), MIN(), MAX()",
      "Функції для форматування тексту: CONCAT(), SUBSTRING(), TRIM()",
      "Функції для створення індексів: CREATE_INDEX(), DROP_INDEX()"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке транзакції в SQL і для чого вони використовуються?",
    "answers": [
      "Це запити, які виконуються на різних серверах",
      "Це група операцій, які виконуються як одне ціле (атомарно); вони або всі виконуються, або всі скасовуються у разі помилки",
      "Це спеціальні запити для аудиту змін у базі даних",
      "Це запити для передачі даних між різними базами даних"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Яка різниця між UNION і UNION ALL в SQL?",
    "answers": [
      "UNION об'єднує результати запитів і видаляє дублікати, UNION ALL об'єднує всі результати, включаючи дублікати",
      "UNION для запитів до однієї таблиці, UNION ALL для запитів до різних таблиць",
      "UNION тільки для SELECT, UNION ALL для всіх типів запитів",
      "Немає різниці, це синоніми"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Що таке ACID-властивості транзакцій?",
    "answers": [
      "Advanced, Classified, Indexed, Detached",
      "Atomicity (атомарність), Consistency (узгодженість), Isolation (ізоляція), Durability (довговічність)",
      "Automatic, Continuous, Instant, Direct",
      "Authentication, Caching, Indexing, Debugging"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Яка різниця між функціями та процедурами в SQL?",
    "answers": [
      "Немає різниці, це синоніми",
      "Функції повертають значення і використовуються в запитах, процедури можуть виконувати дії і не обов'язково повертають значення",
      "Функції тільки для обчислень, процедури тільки для операцій з даними",
      "Функції вбудовані в SQL, процедури створюються користувачем"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке денормалізація бази даних і коли вона використовується?",
    "answers": [
      "Процес виправлення помилок у базі даних",
      "Процес зменшення розміру бази даних шляхом стиснення даних",
      "Процес об'єднання нормалізованих таблиць для покращення продуктивності запитів за рахунок контрольованого дублювання даних",
      "Процес видалення застарілих або непотрібних даних"
    ],
    "correctAnswerId": 2
  },
  {
    "question": "Що таке самоз'єднання (SELF JOIN) в SQL?",
    "answers": [
      "З'єднання таблиці самої з собою, використовуючи різні аліаси для тієї самої таблиці",
      "З'єднання таблиці з її резервною копією",
      "Автоматичне з'єднання таблиць за первинними ключами",
      "З'єднання таблиці з її тимчасовою копією"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Що таке обмеження (constraints) в SQL і які типи існують?",
    "answers": [
      "Обмеження - це способи захисту бази даних від кібератак; типи: Firewall, Encryption, Authentication",
      "Обмеження - це правила, які визначають допустимі значення в таблицях; типи: PRIMARY KEY, FOREIGN KEY, UNIQUE, NOT NULL, CHECK, DEFAULT",
      "Обмеження - це ліміти на розмір таблиць; типи: Size, Count, Memory",
      "Обмеження - це параметри підключення до бази даних; типи: Timeout, Connection Limit, Query Limit"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Який результат запиту?\n```sql\nSELECT * FROM users WHERE age BETWEEN 20 AND 30;\n```",
    "answers": [
      "Користувачі віком від 20 до 30 включно",
      "Користувачі віком від 20 до 29 включно",
      "Користувачі віком від 21 до 30 включно",
      "Користувачі віком від 21 до 29 включно"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Що таке представлення (VIEW) в SQL і для чого воно використовується?",
    "answers": [
      "Представлення - це фізична копія таблиці з меншою кількістю стовпців",
      "Представлення - це віртуальна таблиця, яка базується на результаті SQL-запиту і може використовуватися для спрощення запитів, безпеки та абстракції даних",
      "Представлення - це графічний інтерфейс для перегляду даних",
      "Представлення - це тимчасова таблиця, яка автоматично видаляється після закриття з'єднання"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке зовнішній ключ (FOREIGN KEY) і як він використовується?",
    "answers": [
      "Це ключ для шифрування даних у базі",
      "Це поле, яке посилається на PRIMARY KEY іншої таблиці, для забезпечення зв'язку між таблицями та цілісності даних",
      "Це ключ для доступу до зовнішніх баз даних",
      "Це додатковий індекс для пришвидшення запитів"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке SQL-оператор MERGE (або UPSERT)?",
    "answers": [
      "Оператор для об'єднання двох баз даних",
      "Оператор для вставки або оновлення запису залежно від того, чи існує такий запис",
      "Оператор для об'єднання двох таблиць в одну",
      "Оператор для злиття декількох запитів в один"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Яка різниця між DDL, DML, DCL і TCL в SQL?",
    "answers": [
      "Це різні діалекти SQL від різних виробників",
      "DDL (Data Definition Language) для визначення структури, DML (Data Manipulation Language) для маніпуляції даними, DCL (Data Control Language) для контролю доступу, TCL (Transaction Control Language) для управління транзакціями",
      "Це різні рівні оптимізації SQL-запитів",
      "Це різні типи баз даних: Document, Memory, Cloud, Table"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке курсори в SQL?",
    "answers": [
      "Це вказівники для навігації по результатам запиту рядок за рядком",
      "Це спеціальні знаки для форматування виводу SQL",
      "Це метод для прискорення виконання складних запитів",
      "Це альтернативні назви для аліасів таблиць"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Що таке тригери в SQL і для чого вони використовуються?",
    "answers": [
      "Це спеціальні запити для синхронізації баз даних",
      "Це процедури, які автоматично виконуються при певних подіях в таблиці (INSERT, UPDATE, DELETE) для забезпечення цілісності даних",
      "Це методи оптимізації запитів для швидшого виконання",
      "Це спеціальні ключі для шифрування конфіденційних даних"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Як працює оператор CASE в SQL?",
    "answers": [
      "Створює новий набір даних залежно від умов",
      "Це умовний оператор для виконання різних дій залежно від умов, як аналог if-else у програмуванні",
      "Перетворює регістр текстових даних (верхній/нижній)",
      "Перейменовує стовпці в результатах запиту"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке оператор EXPLAIN в SQL?",
    "answers": [
      "Оператор для додавання коментарів до запитів",
      "Оператор для перевірки синтаксису запиту",
      "Оператор для виведення плану виконання запиту, використовується для оптимізації продуктивності",
      "Оператор для документування структури таблиць"
    ],
    "correctAnswerId": 2
  },
  {
    "question": "Яка різниця між INNER JOIN і CROSS JOIN?",
    "answers": [
      "INNER JOIN з'єднує по умові, CROSS JOIN - декартовий добуток всіх рядків таблиць без умови",
      "INNER JOIN для двох таблиць, CROSS JOIN для трьох і більше",
      "Немає різниці, це синоніми",
      "INNER JOIN використовує індекси, CROSS JOIN - ні"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Що таке ACID-властивості в контексті баз даних?",
    "answers": [
      "Це властивості для тестування продуктивності бази даних",
      "Атомарність, узгодженість, ізольованість, довговічність - властивості, які гарантують надійність транзакцій",
      "Це властивості для оптимізації SQL-запитів",
      "Це властивості для визначення рівня шифрування даних"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке індексний сканування і сканування таблиць в SQL?",
    "answers": [
      "Це методи резервного копіювання бази даних",
      "Це методи доступу до даних: індексне сканування використовує індекси для швидкого доступу, сканування таблиць переглядає кожен рядок",
      "Це методи для перевірки цілісності даних",
      "Це методи для кешування даних"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Яка різниця між кластеризованим і некластеризованим індексом?",
    "answers": [
      "Кластеризований індекс фізично сортує рядки таблиці (один на таблицю), некластеризований створює окрему структуру з посиланнями (може бути багато)",
      "Кластеризований індекс для первинних ключів, некластеризований для зовнішніх",
      "Кластеризований індекс для числових полів, некластеризований для текстових",
      "Немає різниці, це синоніми"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Що таке збережені процедури (stored procedures) в SQL?",
    "answers": [
      "Це кеш для запитів, які часто виконуються",
      "Це підготовлені набори SQL-операторів, які зберігаються на сервері для повторного використання",
      "Це історія запитів, збережена в базі даних",
      "Це автоматичні запити для оновлення даних"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Який результат виконання запиту?\n```sql\nSELECT 1 + NULL;\n```",
    "answers": ["1", "0", "NULL", "Помилка"],
    "correctAnswerId": 2
  },
  {
    "question": "Що таке CTE (Common Table Expressions) в SQL?",
    "answers": [
      "Тимчасові таблиці, які створюються автоматично",
      "Названі тимчасові результати, які існують лише під час виконання запиту, оголошуються за допомогою WITH",
      "Спеціальні таблиці для зберігання метаданих",
      "Таблиці, які спільно використовуються декількома базами даних"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Які типи індексів існують в SQL?",
    "answers": [
      "Тільки первинні і вторинні",
      "B-tree, Hash, Bitmap, R-tree, GiST, GIN, кластеризовані, некластеризовані, унікальні, складені",
      "Тільки унікальні і неунікальні",
      "Тільки числові і текстові"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке затверджений план запиту (query plan) в SQL?",
    "answers": [
      "Це специфікація, яка описує нові функції SQL",
      "Це графічне представлення бази даних",
      "Це план виконання запиту, який показує, як СУБД буде виконувати запит, включаючи використання індексів, порядок операцій і т.д.",
      "Це документація до SQL-запитів"
    ],
    "correctAnswerId": 2
  },
  {
    "question": "Яка різниця між LEFT JOIN і RIGHT JOIN?",
    "answers": [
      "LEFT JOIN залишає всі рядки з лівої таблиці, RIGHT JOIN - з правої",
      "LEFT JOIN швидше, RIGHT JOIN - точніший",
      "Немає різниці, це синоніми",
      "LEFT JOIN для з'єднання по первинному ключу, RIGHT JOIN - по зовнішньому"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Що таке SQL-ін'єкція і як її запобігти?",
    "answers": [
      "Це метод оптимізації запитів; запобігання не потрібне",
      "Це атака, при якій зловмисник вставляє шкідливий SQL-код через вхідні дані; запобігти можна через параметризовані запити, підготовлені оператори і екранування вхідних даних",
      "Це метод для швидкого вставлення даних; запобігти можна через транзакції",
      "Це автоматичне додавання індексів; запобігти можна через ручне управління індексами"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке функціональні індекси в SQL?",
    "answers": [
      "Індекси, які автоматично дефрагментуються",
      "Індекси, які створюються на результаті функції, а не на самому стовпці",
      "Індекси, які оптимізують функціональні залежності",
      "Індекси, які використовуються тільки в функціях"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке RDBMS і які популярні RDBMS ви знаєте?",
    "answers": [
      "Relational Database Management System; популярні: MySQL, PostgreSQL, Oracle, SQL Server, SQLite",
      "Responsive Data Builder for Maintainable Solutions; популярні: React, Angular, Vue",
      "Real Database Master Solution; популярні: Redis, MongoDB, Cassandra",
      "Reliable Data Backup Management Software; популярні: Acronis, Veeam, Backup Exec"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Як працює оператор WITH (CTE) в SQL?",
    "answers": [
      "Це альтернативний синтаксис для JOIN",
      "Це тимчасова таблиця, яка існує тільки під час виконання запиту",
      "Це спосіб об'єднання кількох таблиць в одну",
      "Це метод для включення коментарів у запитах"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке SQL-функція COALESCE і як вона використовується?",
    "answers": [
      "Об'єднує рядки з різних таблиць",
      "Повертає перше не-NULL значення зі списку аргументів",
      "Порівнює два значення на рівність",
      "Перетворює дані з одного типу в інший"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Яка різниця між EXISTS і IN в SQL?",
    "answers": [
      "EXISTS перевіряє наявність рядків у підзапиті і часто працює швидше для великих наборів даних, IN перевіряє значення у списку",
      "EXISTS для текстових даних, IN для числових",
      "Немає різниці, це синоніми",
      "EXISTS для запитів до однієї таблиці, IN для запитів до різних таблиць"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Що таке реплікація бази даних?",
    "answers": [
      "Процес нормалізації даних",
      "Процес копіювання даних з однієї бази даних в іншу для резервного копіювання, розподілу навантаження або високої доступності",
      "Процес видалення дублікатів даних",
      "Процес шифрування даних для безпеки"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Яка різниця між первинним ключем (PRIMARY KEY) і зовнішнім ключем (FOREIGN KEY)?",
    "answers": [
      "Первинний ключ ідентифікує запис в таблиці унікально, зовнішній ключ посилається на первинний ключ в іншій таблиці",
      "Немає різниці, це синоніми",
      "Первинний ключ для вхідних даних, зовнішній для вихідних",
      "Первинний ключ для публічного доступу, зовнішній для приватного"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Що таке SQL-оператор EXCEPT (або MINUS в Oracle)?",
    "answers": [
      "Повертає всі рядки з першого запиту, яких немає у результаті другого запиту",
      "Виключає певні стовпці з результатів запиту",
      "Ігнорує помилки, які виникають під час виконання запиту",
      "Виключає NULL-значення з результатів запиту"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Що таке рекурсивний CTE (Common Table Expression) в SQL?",
    "answers": [
      "CTE, який викликає сам себе, використовується для ієрархічних запитів або для генерації серій значень",
      "CTE, який створюється автоматично під час виконання запиту",
      "CTE, який використовується для обчислення складних математичних функцій",
      "CTE, який постійно оновлюється при зміні даних у базі"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Як працює SQL-функція LEAD() і чим вона відрізняється від LAG()?",
    "answers": [
      "LEAD() повертає значення з наступного рядка у вікні, LAG() - з попереднього рядка",
      "LEAD() обчислює суму наступних значень, LAG() - середнє попередніх",
      "LEAD() сортує дані за зростанням, LAG() - за спаданням",
      "LEAD() працює з числовими даними, LAG() - з датами"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Який результат запиту?\n```sql\nSELECT GREATEST(5, 10, NULL, 8);\n```",
    "answers": ["10", "NULL", "5", "Помилка"],
    "correctAnswerId": 1
  },
  {
    "question": "Що робить оператор VACUUM в PostgreSQL?",
    "answers": [
      "Видаляє всі дані з бази",
      "Очищає простір, займаний видаленими або застарілими рядками, і опціонально аналізує базу для оптимізатора запитів",
      "Стискає всі таблиці для економії місця на диску",
      "Перевіряє цілісність даних у всіх таблицях"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке горизонтальне шардування (horizontal sharding) бази даних?",
    "answers": [
      "Розділення рядків таблиці між різними серверами на основі певного ключа шардування",
      "Розділення стовпців таблиці між різними таблицями для оптимізації доступу",
      "Створення додаткових таблиць для зберігання історичних даних",
      "Дублювання даних на кількох серверах для забезпечення відмовостійкості"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Для чого використовується оператор INTERSECT в SQL?",
    "answers": [
      "Для визначення перетину геометричних об'єктів у просторових даних",
      "Для з'єднання таблиць за допомогою загальних стовпців",
      "Для повернення спільних рядків, які присутні в результатах обох запитів",
      "Для обчислення перетину числових діапазонів"
    ],
    "correctAnswerId": 2
  },
  {
    "question": "Що таке оптимізатор запитів у СУБД?",
    "answers": [
      "Програма, яка форматує SQL-запити для кращої читабельності",
      "Інструмент для автоматичного створення індексів",
      "Програма для автоматичного виправлення помилок у запитах",
      "Компонент СУБД, який визначає найефективніший спосіб виконання SQL-запиту"
    ],
    "correctAnswerId": 3
  },
  {
    "question": "Яка різниця між рівнями ізоляції транзакцій READ COMMITTED і SERIALIZABLE?",
    "answers": [
      "READ COMMITTED дозволяє бачити тільки підтверджені зміни, SERIALIZABLE забезпечує найвищий рівень ізоляції, де транзакції виконуються так, ніби вони виконувалися послідовно",
      "READ COMMITTED використовується для читання, SERIALIZABLE - для запису",
      "READ COMMITTED швидший, але менш безпечний, SERIALIZABLE повільніший, але більш надійний",
      "READ COMMITTED не використовує блокування, SERIALIZABLE використовує блокування"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Що робить SQL-функція SUBSTRING?",
    "answers": [
      "Розбиває рядок на основі розділювача і повертає масив підрядків",
      "Повертає частину рядка з заданої позиції і заданої довжини",
      "Заміняє підрядок в рядку на інший підрядок",
      "Конвертує рядок у нижній регістр"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Яку функцію виконує оператор GROUP BY в SQL?",
    "answers": [
      "Сортує результати за вказаними стовпцями",
      "Об'єднує записи з різних таблиць за спільним полем",
      "Об'єднує рядки з однаковими значеннями у вказаних стовпцях в групи для агрегатних функцій",
      "Групує стовпці для покращення продуктивності запиту"
    ],
    "correctAnswerId": 2
  },
  {
    "question": "Що таке шардинг (sharding) бази даних?",
    "answers": [
      "Процес розбиття великої бази даних на менші, більш керовані частини, розподілені між різними серверами",
      "Процес стиснення даних для економії місця на диску",
      "Метод шифрування даних для підвищення безпеки",
      "Процес видалення непотрібних даних з бази даних"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Який результат запиту?\n```sql\nSELECT NULLIF(10, 10);\n```",
    "answers": ["10", "0", "NULL", "Помилка"],
    "correctAnswerId": 2
  },
  {
    "question": "Що таке режим автофіксації (autocommit) в контексті SQL?",
    "answers": [
      "Автоматичне створення індексів для таблиць",
      "Режим, при якому кожен SQL-оператор автоматично виконується як окрема транзакція",
      "Автоматичне збереження результатів запитів у файл",
      "Режим автоматичного форматування SQL-запитів"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке FULL OUTER JOIN?",
    "answers": [
      "З'єднання, яке повертає тільки спільні рядки з обох таблиць",
      "З'єднання, яке повертає всі рядки з обох таблиць, навіть якщо немає відповідних рядків у іншій таблиці",
      "З'єднання, яке виконується тільки якщо обидві таблиці мають однакову кількість рядків",
      "З'єднання, яке автоматично визначає, який тип JOIN використовувати"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що такий оператор DISTINCT в SQL?",
    "answers": [
      "Фільтрує рядки за унікальним ідентифікатором",
      "Сортує результати за віддаленістю від початку таблиці",
      "Видаляє дублікати з результатів запиту",
      "Виділяє стовпці, які мають унікальні обмеження"
    ],
    "correctAnswerId": 2
  },
  {
    "question": "Яка різниця між операторами IN і ANY в SQL?",
    "answers": [
      "IN порівнює значення з фіксованим списком або підзапитом, ANY порівнює з будь-яким значенням із набору, що повертається підзапитом",
      "IN працює тільки з числами, ANY - з усіма типами даних",
      "IN використовується в умовах WHERE, ANY - в умовах HAVING",
      "Немає різниці, це синоніми"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Що таке хеш-з'єднання (hash join) в контексті виконання SQL-запитів?",
    "answers": [
      "Спосіб шифрування даних при з'єднанні таблиць",
      "Метод з'єднання, при якому менша таблиця хешується в пам'яті для швидкого пошуку відповідних записів",
      "Техніка для створення унікальних ідентифікаторів для записів",
      "Метод з'єднання таблиць з використанням хеш-функцій для уникнення колізій"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Як SQL-оператор PIVOT використовується?",
    "answers": [
      "Для сортування даних у порядку, відмінному від стандартного",
      "Для транспонування рядків у стовпці, перетворюючи унікальні значення одного стовпця в декілька стовпців",
      "Для повороту результатів запиту на певний кут при візуалізації",
      "Для зміни структури таблиці без втрати даних"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Яка різниця між первинним ключем і сурогатним ключем?",
    "answers": [
      "Первинний ключ є обов'язковим для таблиці, сурогатний - опціональним",
      "Первинний ключ - це природний ідентифікатор даних, сурогатний ключ - штучно створений ідентифікатор (як правило, автоінкрементне число)",
      "Первинний ключ може бути тільки числовим, сурогатний - будь-якого типу",
      "Первинний ключ використовується для внутрішніх зв'язків, сурогатний - для зовнішніх"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке MVCC (Multi-Version Concurrency Control)?",
    "answers": [
      "Технологія для створення багатовимірних індексів",
      "Метод керування паралельним виконанням транзакцій, який дозволяє читанню і запису відбуватися одночасно без блокувань",
      "Протокол для синхронізації декількох баз даних",
      "Техніка для створення множинних представлень тієї самої таблиці"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що робить функція ROW_NUMBER() у SQL?",
    "answers": [
      "Повертає кількість рядків у таблиці",
      "Призначає унікальний номер кожному рядку результату запиту відповідно до вказаного порядку",
      "Рахує кількість рядків у кожній групі після GROUP BY",
      "Повертає номер поточного рядка в сесії бази даних"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Який результат наступного запиту?\n```sql\nSELECT CAST('123' AS INT) + 1;\n```",
    "answers": ["'1231'", "124", "'124'", "Помилка типу даних"],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке оператор MERGE в SQL?",
    "answers": [
      "Об'єднує результати кількох таблиць",
      "Вставляє або оновлює дані залежно від того, чи існує запис (UPSERT операція)",
      "Об'єднує два стовпці в один",
      "Об'єднує два дублікати записів в один"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Яка різниця між INNER JOIN і NATURAL JOIN?",
    "answers": [
      "INNER JOIN вимагає явно вказати умову з'єднання, NATURAL JOIN автоматично з'єднує таблиці за стовпцями з однаковими назвами",
      "INNER JOIN повільніший, NATURAL JOIN оптимізований для швидкості",
      "INNER JOIN для простих умов, NATURAL JOIN для складних",
      "NATURAL JOIN підтримується всіма СУБД, INNER JOIN - ні"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Що таке SQL-функція CASE і як вона використовується?",
    "answers": [
      "Функція для переведення тексту у верхній регістр",
      "Умовний вираз, аналог if-then-else, що дозволяє виконувати різні дії залежно від умов",
      "Функція для створення нових рядків у таблиці",
      "Спеціальна функція для роботи з символьними типами даних"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке OLAP і OLTP в контексті баз даних?",
    "answers": [
      "Різні типи SQL-запитів: OLAP для читання, OLTP для запису",
      "OLAP (Online Analytical Processing) - для аналізу великих обсягів історичних даних, OLTP (Online Transaction Processing) - для обробки великої кількості коротких транзакцій",
      "Різні типи баз даних: OLAP для Oracle, OLTP для SQL Server",
      "Різні рівні оптимізації запитів: OLAP для простих, OLTP для складних"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке SQL-функція RANK() і в чому її відмінність від DENSE_RANK()?",
    "answers": [
      "RANK() і DENSE_RANK() обидві присвоюють ранги рядкам, але RANK() залишає пропуски при однакових значеннях, DENSE_RANK() - ні",
      "RANK() для числових даних, DENSE_RANK() для текстових",
      "RANK() сортує за зростанням, DENSE_RANK() за спаданням",
      "RANK() для невеликих наборів даних, DENSE_RANK() для великих"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Яка функція оператора ROLLUP в SQL?",
    "answers": [
      "Видаляє всі записи з таблиці після виконання запиту",
      "Відкочує транзакцію у разі помилки",
      "Створює додаткові рядки з підсумками для ієрархічних груп у результатах GROUP BY",
      "Об'єднує декілька таблиць в одну на основі їх схожості"
    ],
    "correctAnswerId": 2
  },
  {
    "question": "Що таке віконні функції (window functions) в SQL?",
    "answers": [
      "Функції для роботи з графічними вікнами СУБД",
      "Функції, які обчислюють значення на основі набору рядків, пов'язаних з поточним рядком (вікно)",
      "Функції для обмеження кількості результатів запиту",
      "Функції для створення спливаючих вікон у веб-додатках"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Яка різниця між оператором TRUNCATE і DELETE без умови WHERE?",
    "answers": [
      "TRUNCATE видаляє всі рядки з таблиці швидше, не логує індивідуальні видалення, зазвичай не може бути відкочений і скидає лічильники AUTO_INCREMENT",
      "TRUNCATE видаляє дані з диска, DELETE тільки логічно",
      "TRUNCATE видаляє структуру таблиці, DELETE - тільки дані",
      "Немає різниці, це синоніми"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Що таке декартовий добуток (cartesian product) у SQL?",
    "answers": [
      "Добуток двох числових стовпців",
      "Результат JOIN без умови, який повертає всі можливі комбінації рядків з обох таблиць (M x N рядків)",
      "Результат множення кількості рядків на кількість стовпців",
      "Множина всіх можливих значень у стовпці"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Який результат запиту?\n```sql\nSELECT COALESCE(NULL, NULL, 'Hello', 'World');\n```",
    "answers": ["NULL", "'Hello'", "'World'", "Помилка"],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке SQL-ін'єкція і як розробники можуть її запобігти?",
    "answers": [
      "Це помилка, що виникає при вставці невірного типу даних; запобігається перевіркою типів",
      "Це метод додавання даних у базу; запобігання не потрібне",
      "Це спосіб оптимізації запитів; запобігається через індекси",
      "Це атака, при якій шкідливий код вставляється через вхідні дані; запобігається через параметризовані запити та екранування вхідних даних"
    ],
    "correctAnswerId": 3
  },
  {
    "question": "Як працює SQL-оператор PARTITION BY у віконних функціях?",
    "answers": [
      "Розбиває дані на окремі таблиці",
      "Ділить результат запиту на окремі розділи, на яких незалежно виконуються віконні функції",
      "Розділяє запит на частини для паралельного виконання",
      "Створює окремі розділи на диску для різних типів даних"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке підзапити з кореляцією (correlated subqueries)?",
    "answers": [
      "Запити, які виконуються однаково швидко незалежно від обсягу даних",
      "Запити, які посилаються на стовпці з зовнішнього запиту і виконуються для кожного рядка зовнішнього запиту",
      "Запити, які кешуються для повторного використання",
      "Запити, які змінюють свою структуру залежно від вхідних даних"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке схема бази даних (database schema)?",
    "answers": [
      "Програма для візуального проектування баз даних",
      "Структура бази даних, яка описує таблиці, поля, зв'язки, індекси та інші об'єкти",
      "Файл з резервною копією бази даних",
      "Набір правил для перевірки цілісності даних"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Який результат виконання запиту?\n```sql\nSELECT SUM(NULL);\n```",
    "answers": ["0", "NULL", "1", "Помилка"],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке оператор OVER в SQL і для чого він використовується?",
    "answers": [
      "Для подолання обмежень в запитах",
      "Для створення віконних функцій, які обчислюють значення на наборі рядків",
      "Для включення додаткових таблиць в запит",
      "Для збільшення ліміту результатів запиту"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Яка різниця між UNION і JOIN в SQL?",
    "answers": [
      "UNION об'єднує рядки з різних запитів вертикально (додає рядки), JOIN об'єднує таблиці горизонтально (додає стовпці)",
      "UNION швидший, JOIN більш гнучкий",
      "UNION для текстових даних, JOIN для числових",
      "Немає різниці, це синоніми"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Що робить функція JSON_EXTRACT у SQL?",
    "answers": [
      "Конвертує таблицю в JSON-формат",
      "Витягує значення з JSON-даних за вказаним шляхом",
      "Експортує результати запиту в JSON-файл",
      "Перевіряє, чи є дані в форматі JSON"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Як працює оператор FETCH FIRST n ROWS ONLY в SQL?",
    "answers": [
      "Повертає тільки n перших рядків з результату запиту",
      "Витягує перші n таблиць з бази даних",
      "Оновлює перші n рядків таблиці",
      "Оптимізує виконання запиту для перших n рядків"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Який результат запиту?\n```sql\nSELECT NVL(NULL, 'Not Available');\n```",
    "answers": ["NULL", "'Not Available'", "0", "Помилка"],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке B-tree індекс у базах даних?",
    "answers": [
      "Індекс, який організовує дані в бінарну структуру",
      "Збалансоване дерево, яке дозволяє швидко знаходити, додавати і видаляти записи, найпоширеніший тип індексу в СУБД",
      "Індекс, який оптимізований для текстових даних",
      "Індекс, який створюється автоматично для кожної таблиці"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке SQL-функція NULLIF і як вона використовується?",
    "answers": [
      "Замінює NULL значення на вказане значення за замовчуванням",
      "Повертає NULL, якщо два вказаних вирази рівні, інакше повертає перший вираз",
      "Перевіряє, чи є значення NULL",
      "Видаляє всі NULL значення з результатів запиту"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що таке ключі-кандидати (candidate keys) в реляційних базах даних?",
    "answers": [
      "Ключі, які потенційно можуть стати первинними ключами",
      "Ключі, які використовуються для шифрування даних",
      "Ключі, які можуть змінюватися при оновленні даних",
      "Ключі, які створюються для тестування продуктивності"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Як запобігти виконанню повного сканування таблиці (full table scan) у SQL-запитах?",
    "answers": [
      "Використовувати тільки запити SELECT *",
      "Завжди використовувати WHERE з IN оператором",
      "Створювати відповідні індекси і переконатися, що SQL-запити їх використовують",
      "Обмежувати кількість запитів до бази даних"
    ],
    "correctAnswerId": 2
  },
  {
    "question": "Яка різниця між CREATE TABLE і SELECT INTO у SQL?",
    "answers": [
      "CREATE TABLE створює порожню таблицю з визначеною структурою, SELECT INTO створює і заповнює таблицю даними з запиту",
      "CREATE TABLE для постійних таблиць, SELECT INTO для тимчасових",
      "CREATE TABLE для структурованих даних, SELECT INTO для неструктурованих",
      "CREATE TABLE підтримується всіма СУБД, SELECT INTO - тільки деякими"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Що таке матеріалізоване представлення (materialized view)?",
    "answers": [
      "Представлення, яке підтримує тільки операції читання",
      "Представлення з фізично збереженими результатами запиту, яке періодично оновлюється",
      "Представлення, яке автоматично оновлюється при зміні даних",
      "Представлення, яке створюється тільки для зовнішніх користувачів"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Який результат запиту?\n```sql\nSELECT CONCAT('Hello', ' ', 'World');\n```",
    "answers": [
      "'HelloWorld'",
      "'Hello World'",
      "['Hello', 'World']",
      "Помилка"
    ],
    "correctAnswerId": 1
  },
  {
    "question": "Що означає скорочення CRUD в контексті SQL?",
    "answers": [
      "Create, Read, Update, Delete - основні операції для роботи з даними",
      "Centralized, Relational, Unified, Distributed - типи баз даних",
      "Compiled, Runtime, Uncompiled, Debug - режими виконання SQL",
      "Common, Rare, Unique, Deprecated - типи SQL-запитів"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Що таке часовий штамп (timestamp) у базах даних?",
    "answers": [
      "Тип даних для зберігання дати та часу",
      "Унікальний ідентифікатор, який автоматично збільшується",
      "Інструмент для вимірювання часу виконання запиту",
      "Метка часу останнього оновлення запису, яка використовується для контролю версій"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Яка різниця між функціями COUNT(*) і COUNT(column) в SQL?",
    "answers": [
      "COUNT(*) рахує всі рядки, включаючи NULL значення, COUNT(column) рахує всі не-NULL значення у вказаному стовпці",
      "COUNT(*) рахує тільки непорожні рядки, COUNT(column) рахує всі рядки",
      "COUNT(*) працює швидше, але менш точно, COUNT(column) повільніше, але точніше",
      "COUNT(*) для простих таблиць, COUNT(column) для складних"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Що таке SQL-ін'єкція типу 'UNION based'?",
    "answers": [
      "Тип атаки, при якому зловмисник додає оператор UNION до запиту для доступу до інших таблиць",
      "Метод оптимізації запитів через об'єднання результатів",
      "Спосіб створення представлень з використанням UNION",
      "Техніка для поєднання декількох баз даних"
    ],
    "correctAnswerId": 0
  },
  {
    "question": "Що таке ORM (Object-Relational Mapping) і як він пов'язаний з SQL?",
    "answers": [
      "Спеціальний тип індексу для об'єктних баз даних",
      "Техніка програмування, яка дозволяє працювати з реляційними базами даних через об'єктно-орієнтований код, абстрагуючись від SQL",
      "Метод для оптимізації SQL-запитів шляхом перетворення їх в об'єктну форму",
      "Тип бази даних, який підтримує як реляційну, так і об'єктну модель"
    ],
    "correctAnswerId": 1
  }
]
